# coding: utf-8

"""
    Swagger Petstore

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from datetime import datetime
import six


class NxlogMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_time': datetime,
        'detection_time': datetime,
        'hostname': 'str',
        'severity_value': 'str',
        'severity': 'str',
        'organization': 'str',
        'org_id': 'str',
        'dev_cat': 'str',
        'dev_sub_cat': 'str',
        'dev_type': 'str',
        'dev_vendor': 'str',
        'raw': 'object',
        'md5': 'str'
    }

    attribute_map = {
        'event_time': 'EventTime',
        'detection_time': 'DetectionTime',
        'hostname': 'Hostname',
        'severity_value': 'SeverityValue',
        'severity': 'Severity',
        'organization': 'Organization',
        'org_id': 'OrgID',
        'dev_cat': 'DevCat',
        'dev_sub_cat': 'DevSubCat',
        'dev_type': 'DevType',
        'dev_vendor': 'DevVendor',
        'raw': 'raw',
        'md5': 'md5'
    }

    def __init__(self, event_time=None, detection_time=None, hostname=None, severity_value=None, severity=None,
                 organization=None, org_id=None, dev_cat=None, dev_sub_cat=None, dev_type=None, dev_vendor=None,
                 raw=None, md5=None):  # noqa: E501
        """NxlogMessage - a model defined in Swagger"""  # noqa: E501

        self._event_time = None
        self._detection_time = None
        self._hostname = None
        self._severity_value = None
        self._severity = None
        self._organization = None
        self._org_id = None
        self._dev_cat = None
        self._dev_sub_cat = None
        self._dev_type = None
        self._dev_vendor = None
        self._raw = None
        self._md5 = None
        self.discriminator = None

        if event_time is not None:
            self.event_time = event_time
        if detection_time is not None:
            self.detection_time = detection_time
        if hostname is not None:
            self.hostname = hostname
        if severity_value is not None:
            self.severity_value = severity_value
        if severity is not None:
            self.severity = severity
        if organization is not None:
            self.organization = organization
        if org_id is not None:
            self.org_id = org_id
        if dev_cat is not None:
            self.dev_cat = dev_cat
        if dev_sub_cat is not None:
            self.dev_sub_cat = dev_sub_cat
        if dev_type is not None:
            self.dev_type = dev_type
        if dev_vendor is not None:
            self.dev_vendor = dev_vendor
        if raw is not None:
            self.raw = raw
        if md5 is not None:
            self.md5 = md5

    @property
    def event_time(self):
        """Gets the event_time of this NxlogMessage.  # noqa: E501


        :return: The event_time of this NxlogMessage.  # noqa: E501
        :rtype: str
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this NxlogMessage.


        :param event_time: The event_time of this NxlogMessage.  # noqa: E501
        :type: str
        """

        self._event_time = event_time

    @property
    def detection_time(self):
        """Gets the detection_time of this NxlogMessage.  # noqa: E501


        :return: The detection_time of this NxlogMessage.  # noqa: E501
        :rtype: str
        """
        return self._detection_time

    @detection_time.setter
    def detection_time(self, detection_time):
        """Sets the detection_time of this NxlogMessage.


        :param detection_time: The detection_time of this NxlogMessage.  # noqa: E501
        :type: str
        """

        self._detection_time = detection_time

    @property
    def hostname(self):
        """Gets the hostname of this NxlogMessage.  # noqa: E501


        :return: The hostname of this NxlogMessage.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this NxlogMessage.


        :param hostname: The hostname of this NxlogMessage.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def severity_value(self):
        """Gets the severity_value of this NxlogMessage.  # noqa: E501


        :return: The severity_value of this NxlogMessage.  # noqa: E501
        :rtype: str
        """
        return self._severity_value

    @severity_value.setter
    def severity_value(self, severity_value):
        """Sets the severity_value of this NxlogMessage.


        :param severity_value: The severity_value of this NxlogMessage.  # noqa: E501
        :type: str
        """

        self._severity_value = severity_value

    @property
    def severity(self):
        """Gets the severity of this NxlogMessage.  # noqa: E501


        :return: The severity of this NxlogMessage.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this NxlogMessage.


        :param severity: The severity of this NxlogMessage.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def organization(self):
        """Gets the organization of this NxlogMessage.  # noqa: E501


        :return: The organization of this NxlogMessage.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this NxlogMessage.


        :param organization: The organization of this NxlogMessage.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def org_id(self):
        """Gets the org_id of this NxlogMessage.  # noqa: E501


        :return: The org_id of this NxlogMessage.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this NxlogMessage.


        :param org_id: The org_id of this NxlogMessage.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def dev_cat(self):
        """Gets the dev_cat of this NxlogMessage.  # noqa: E501


        :return: The dev_cat of this NxlogMessage.  # noqa: E501
        :rtype: str
        """
        return self._dev_cat

    @dev_cat.setter
    def dev_cat(self, dev_cat):
        """Sets the dev_cat of this NxlogMessage.


        :param dev_cat: The dev_cat of this NxlogMessage.  # noqa: E501
        :type: str
        """

        self._dev_cat = dev_cat

    @property
    def dev_sub_cat(self):
        """Gets the dev_sub_cat of this NxlogMessage.  # noqa: E501


        :return: The dev_sub_cat of this NxlogMessage.  # noqa: E501
        :rtype: str
        """
        return self._dev_sub_cat

    @dev_sub_cat.setter
    def dev_sub_cat(self, dev_sub_cat):
        """Sets the dev_sub_cat of this NxlogMessage.


        :param dev_sub_cat: The dev_sub_cat of this NxlogMessage.  # noqa: E501
        :type: str
        """

        self._dev_sub_cat = dev_sub_cat

    @property
    def dev_type(self):
        """Gets the dev_type of this NxlogMessage.  # noqa: E501


        :return: The dev_type of this NxlogMessage.  # noqa: E501
        :rtype: str
        """
        return self._dev_type

    @dev_type.setter
    def dev_type(self, dev_type):
        """Sets the dev_type of this NxlogMessage.


        :param dev_type: The dev_type of this NxlogMessage.  # noqa: E501
        :type: str
        """

        self._dev_type = dev_type

    @property
    def dev_vendor(self):
        """Gets the dev_vendor of this NxlogMessage.  # noqa: E501


        :return: The dev_vendor of this NxlogMessage.  # noqa: E501
        :rtype: str
        """
        return self._dev_vendor

    @dev_vendor.setter
    def dev_vendor(self, dev_vendor):
        """Sets the dev_vendor of this NxlogMessage.


        :param dev_vendor: The dev_vendor of this NxlogMessage.  # noqa: E501
        :type: str
        """

        self._dev_vendor = dev_vendor

    @property
    def raw(self):
        """Gets the raw of this NxlogMessage.  # noqa: E501


        :return: The raw of this NxlogMessage.  # noqa: E501
        :rtype: object
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this NxlogMessage.


        :param raw: The raw of this NxlogMessage.  # noqa: E501
        :type: object
        """

        self._raw = raw

    @property
    def md5(self):
        """Gets the md5 of this NxlogMessage.  # noqa: E501


        :return: The md5 of this NxlogMessage.  # noqa: E501
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this NxlogMessage.


        :param md5: The md5 of this NxlogMessage.  # noqa: E501
        :type: str
        """

        self._md5 = md5

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[self.attribute_map[attr]] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[self.attribute_map[attr]] = value.to_dict()
            elif isinstance(value, dict):
                result[self.attribute_map[attr]] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[self.attribute_map[attr]] = value
        if issubclass(NxlogMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NxlogMessage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NxlogMessage):
            return True

        return self.to_dict() != other.to_dict()
